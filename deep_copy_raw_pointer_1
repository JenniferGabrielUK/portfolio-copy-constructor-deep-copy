// portfolio-copy-constructor-deep-copy.cpp : This file contains the 'main' function. Program execution begins and ends there.
//Copy constructor for a raw pointer within the attributes of a class - uses a deep copy - so that the pointer and the data the pointer is
//pointing to are copied - avoiding a crash when the destructor is called.
#include <iostream>
#include <string>

class Deep_copy {
private:
    int* data;
public:
    Deep_copy(int d);
    Deep_copy(const Deep_copy &source); //Deep copy constructor
    ~Deep_copy();
    void display_deep_copy (Deep_copy s);
    void set_data_value(int i);
    int get_data_value();
};

Deep_copy::Deep_copy(int d) { 
    data = new int; *data = d; 
}

Deep_copy::Deep_copy(const Deep_copy &source) {  //Copy constructor - deep copy.
    data = new int;
    *data = *source.data;
    std::cout << "Copy constructor - deep." << std::endl;
}

Deep_copy::~Deep_copy() {
    delete data;
    std::cout << "Destructor being called." << std::endl;
};

void display_deep_copy(Deep_copy s) {
    std::cout << s.get_data_value() << std::endl;
}

void Deep_copy::set_data_value(int i) {
    *data = i;
}

int Deep_copy::get_data_value() {
    return *data;
}

int main()
{
    Deep_copy obj1{100}; 
    display_deep_copy(obj1);
    obj1.set_data_value(1000);
    Deep_copy obj{ obj1 };
    return 0;
}
